import os
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.backends import default_backend
from tkinter import Tk, filedialog, messagebox, simpledialog
from tkinter import Button, Label
import struct

class AdvancedEncryptionTool:
    def __init__(self, password: str):
        self.backend = default_backend()
        self.salt = os.urandom(16)
        self.key = self._derive_key(password, self.salt)

    def _derive_key(self, password: str, salt: bytes) -> bytes:
        kdf = PBKDF2HMAC(
            algorithm=hashes.SHA256(),
            length=32,
            salt=salt,
            iterations=100000,
            backend=self.backend
        )
        return kdf.derive(password.encode())

    def encrypt(self, plaintext_file: str, encrypted_file: str):
        iv = os.urandom(16)
        cipher = Cipher(algorithms.AES(self.key), modes.CFB(iv), backend=self.backend)
        encryptor = cipher.encryptor()

        with open(plaintext_file, 'rb') as infile, open(encrypted_file, 'wb') as outfile:
            outfile.write(self.salt)
            outfile.write(iv)
            while chunk := infile.read(4096):
                outfile.write(encryptor.update(chunk))
            outfile.write(encryptor.finalize())

    def decrypt(self, encrypted_file: str, decrypted_file: str, password: str):
        with open(encrypted_file, 'rb') as infile:
            salt = infile.read(16)
            iv = infile.read(16)
            key = self._derive_key(password, salt)

            cipher = Cipher(algorithms.AES(key), modes.CFB(iv), backend=self.backend)
            decryptor = cipher.decryptor()

            with open(decrypted_file, 'wb') as outfile:
                while chunk := infile.read(4096):
                    outfile.write(decryptor.update(chunk))
                outfile.write(decryptor.finalize())

class EncryptionApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Advanced Encryption Tool")

        self.label1 = Label(root, text="Choose an option:")
        self.label1.pack(pady=10)

        self.encrypt_button = Button(root, text="Encrypt a File", command=self.encrypt_file)
        self.encrypt_button.pack(pady=5)

        self.decrypt_button = Button(root, text="Decrypt a File", command=self.decrypt_file)
        self.decrypt_button.pack(pady=5)

    def encrypt_file(self):
        plaintext_file = filedialog.askopenfilename(title="Select File to Encrypt")
        if not plaintext_file:
            return
        encrypted_file = filedialog.asksaveasfilename(title="Save Encrypted File")
        if not encrypted_file:
            return
        password = simpledialog.askstring("Password", "Enter a password:", show='*')
        if not password:
            return

        try:
            tool = AdvancedEncryptionTool(password)
            tool.encrypt(plaintext_file, encrypted_file)
            messagebox.showinfo("Success", f"File encrypted successfully and saved to {encrypted_file}")
        except Exception as e:
            messagebox.showerror("Error", f"Encryption failed: {e}")

    def decrypt_file(self):
        encrypted_file = filedialog.askopenfilename(title="Select File to Decrypt")
        if not encrypted_file:
            return
        decrypted_file = filedialog.asksaveasfilename(title="Save Decrypted File")
        if not decrypted_file:
            return
        password = simpledialog.askstring("Password", "Enter the password:", show='*')
        if not password:
            return

        try:
            tool = AdvancedEncryptionTool(password)
            tool.decrypt(encrypted_file, decrypted_file, password)
            messagebox.showinfo("Success", f"File decrypted successfully and saved to {decrypted_file}")
        except Exception as e:
            messagebox.showerror("Error", f"Decryption failed: {e}")

if __name__ == "__main__":
    root = Tk()
    app = EncryptionApp(root)
    root.mainloop()
